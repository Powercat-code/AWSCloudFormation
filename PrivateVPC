{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "VPC Private Environment",
  "Parameters": {
    "Company": {
      "Type": "String",
      "Description": "Client company short name",
      "Default": "##Company|sandbox|Client company short name##",
      "MinLength": "2",
      "MaxLength": "24",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*"
    },
    "VPCName": {
      "Type": "String",
      "Description": "VPC Name",
      "Default": "##VPCName||VPC Name##"
    },
    "Env": {
      "Description": "Environment string. EG: dev, test, production",
      "Type": "String",
      "Default": "##Env|dev|Environment tag used by puppet##",
      "AllowedValues": [
        "dev",
        "test",
        "production"
      ]
    },
    "AvailabilityZone1": {
      "Description": "Availability Zone 1",
      "Type": "String",
      "Default": "##AvailabilityZone1|AZ|Availability Zone 1##"
    },
    "AvailabilityZone2": {
      "Description": "Availability Zone 2",
      "Type": "String",
      "Default": "##AvailabilityZone2|AZ+1|Availability Zone 2##"
    },
    "AvailabilityZone3": {
      "Description": "Availability Zone 3",
      "Type": "String",
      "Default": "##AvailabilityZone3|Az+2|Availability Zone 3##"
    },
    "AvailabilityZone4": {
      "Description": "Availability Zone 4",
      "Type": "String",
      "Default": "##AvailabilityZone4|Az+2|Availability Zone 4##"
    },
    "AvailabilityZone5": {
      "Description": "Availability Zone 5",
      "Type": "String",
      "Default": "##AvailabilityZone5|Az+2|Availability Zone 5##"
    },
    "AvailabilityZone6": {
      "Description": "Availability Zone 6",
      "Type": "String",
      "Default": "##AvailabilityZone6|Az+2|Availability Zone 6##"
    },
    "HQLocation1": {
      "Description": "HQ IP CIDR",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "##HQLocation1|MYIP|HQ IP CIDR to whitelist##",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "HQLocation2": {
      "Description": "HQ IP CIDR",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "##HQLocation2|Ip Address|HQ IP CIDR to whitelist##",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "VPCSubnet": {
      "Description": "VPC Network CIDR",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "##VPCSubnet|auto25|VPC Network CIDR##",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "VPCSubnet1": {
      "Description": "Subnet 1 CIDR",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "##VPCSubnet1|auto27|Subnet 1 CIDR or auto2X##",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "VPCSubnet2": {
      "Description": "Subnet 2 CIDR",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "##VPCSubnet2|auto27|Subnet 2 CIDR or auto2X##",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "VPCSubnet3": {
      "Description": "Subnet 3 CIDR",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "##VPCSubnet3|auto27|Subnet 3 CIDR or auto2X##",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
		},
    "VPCSubnet4": {
      "Description": "Subnet 4 CIDR",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "##VPCSubnet4|auto27|Subnet 4 CIDR or auto2X##",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "VPCSubnet5": {
      "Description": "Subnet 5 CIDR",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "##VPCSubnet5|auto27|Subnet 5 CIDR or auto2X##",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "VPCSubnet6": {
      "Description": "Subnet 6 CIDR",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "##VPCSubnet6|auto27|Subnet 6 CIDR or auto2X##",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "createNatGateway": {
        "Type": "String",
        "Description": "Flag to create NatGateway",
        "Default": true
      },
    "createInternetGateway": {
        "Type": "String",
        "Description": "Flag to create InternetGateway",
        "Default": true
      }
    },
    "Resources": {
      "EC2SecurityGroup": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "GroupDescription": "EC2 Security Group",
          "VpcId": {
            "Ref": "VPC"
          },
          "Tags": [
            {
              "Key": "Name",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "Company"
                    },
                    "-",
                    {
                      "Ref": "Env"
                    },
                    "-EC2"
                  ]
                ]
              }
            }
          ]
        }
      },
      "RDSSecurityGroup": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "GroupDescription": "RDS Security Group",
          "VpcId": {
            "Ref": "VPC"
          },
          "Tags": [
            {
              "Key": "Name",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "Company"
                    },
                    "-",
                    {
                      "Ref": "Env"
                    },
                    "-RDS"
                  ]
                ]
              }
            }
          ]
        }
      },
      "VPC": {
        "Type": "AWS::EC2::VPC",
        "Properties": {
          "CidrBlock": {
            "Ref": "VPCSubnet"
          },
          "EnableDnsHostnames": "true",
          "EnableDnsSupport": "true",
          "Tags": [
            {
              "Key": "Name",
              "Value": {
                "Ref": "VPCName"
              }
            }
          ]
        }
      },
      "Ingress22FromHQ": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp": {
            "Ref": "HQLocation1"
          },
          "GroupId": {
            "Ref": "EC2SecurityGroup"
          }
        }
      },
      "Ingress22FromHQ2": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp": {
            "Ref": "HQLocation2"
          },
          "GroupId": {
            "Ref": "EC2SecurityGroup"
          }
        }
      },
      "IngressEC2FromVPN": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
          "IpProtocol": "-1",
          "FromPort": "0",
          "ToPort": "65535",
          "CidrIp": "10.16.0.0/16",
          "GroupId": {
            "Ref": "EC2SecurityGroup"
          }
        }
      },
      "IngressEC2FromCHECKMK": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
          "IpProtocol": "-1",
          "FromPort": "0",
          "ToPort": "65535",
          "CidrIp": "52.33.41.165/32",
          "GroupId": {
            "Ref": "EC2SecurityGroup"
          }
        }
      },
      "Subnet1": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "MapPublicIpOnLaunch": "false",
          "CidrBlock": {
            "Ref": "VPCSubnet1"
          },
          "VpcId": {
            "Ref": "VPC"
          },
          "AvailabilityZone": {
            "Ref": "AvailabilityZone1"
          },
          "Tags": [
            {
              "Key": "Name",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "Company"
                    },
                    "-",
                    {
                      "Ref": "Env"
                    },
                    "-",
                    {
                      "Ref": "AvailabilityZone1"
                    }
                  ]
                ]
              }
            }
          ]
        }
      },
      "Subnet2": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "MapPublicIpOnLaunch": "false",
          "CidrBlock": {
            "Ref": "VPCSubnet2"
          },
          "VpcId": {
            "Ref": "VPC"
          },
          "AvailabilityZone": {
            "Ref": "AvailabilityZone2"
          },
          "Tags": [
            {
              "Key": "Name",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "Company"
                    },
                    "-",
                    {
                      "Ref": "Env"
                    },
                    "-",
                    {
                      "Ref": "AvailabilityZone2"
                    }
                  ]
                ]
              }
            }
          ]
        }
      },
      "Subnet3": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "MapPublicIpOnLaunch": "false",
          "CidrBlock": {
            "Ref": "VPCSubnet3"
          },
          "VpcId": {
            "Ref": "VPC"
          },
          "AvailabilityZone": {
            "Ref": "AvailabilityZone3"
          },
          "Tags": [
            {
              "Key": "Name",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "Company"
                    },
                    "-",
                    {
                      "Ref": "Env"
                    },
                    "-",
                    {
                      "Ref": "AvailabilityZone3"
                    }
                  ]
                ]
              }
            }
          ]
        }
      },
      "Subnet4": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "MapPublicIpOnLaunch": "true",
          "CidrBlock": {
            "Ref": "VPCSubnet4"
          },
          "VpcId": {
            "Ref": "VPC"
          },
          "AvailabilityZone": {
            "Ref": "AvailabilityZone4"
          },
          "Tags": [
            {
              "Key": "Name",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "Company"
                    },
                    "-",
                    {
                      "Ref": "Env"
                    },
                    "-",
                    {
                      "Ref": "AvailabilityZone4"
                    }
                  ]
                ]
              }
            }
          ]
        }
      },
      "Subnet5": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "MapPublicIpOnLaunch": "true",
          "CidrBlock": {
            "Ref": "VPCSubnet5"
          },
          "VpcId": {
            "Ref": "VPC"
          },
          "AvailabilityZone": {
            "Ref": "AvailabilityZone5"
          },
          "Tags": [
            {
              "Key": "Name",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "Company"
                    },
                    "-",
                    {
                      "Ref": "Env"
                    },
                    "-",
                    {
                      "Ref": "AvailabilityZone5"
                    }
                  ]
                ]
              }
            }
          ]
        }
      },
      "Subnet6": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "MapPublicIpOnLaunch": "true",
          "CidrBlock": {
            "Ref": "VPCSubnet6"
          },
          "VpcId": {
            "Ref": "VPC"
          },
          "AvailabilityZone": {
            "Ref": "AvailabilityZone6"
          },
          "Tags": [
            {
              "Key": "Name",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "Company"
                    },
                    "-",
                    {
                      "Ref": "Env"
                    },
                    "-",
                    {
                      "Ref": "AvailabilityZone6"
                    }
                  ]
                ]
              }
            }
          ]
        }
      },
      "RDSSGIngressFromEC2": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
          "GroupId": {
            "Ref": "RDSSecurityGroup"
          },
          "IpProtocol": "tcp",
          "FromPort": "1521",
          "ToPort": "1521",
          "SourceSecurityGroupId": {
            "Ref": "EC2SecurityGroup"
          }
        }
      },
      "RDSSGMySQLIngressFromEC2": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
          "GroupId": {
            "Ref": "RDSSecurityGroup"
          },
          "IpProtocol": "tcp",
          "FromPort": "3306",
          "ToPort": "3306",
          "SourceSecurityGroupId": {
            "Ref": "EC2SecurityGroup"
          }
        }
      },
      "RDSSGIngressFromHQ": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
          "GroupId": {
            "Ref": "RDSSecurityGroup"
          },
          "IpProtocol": "tcp",
          "FromPort": "1521",
          "ToPort": "1521",
          "CidrIp": {
            "Ref": "HQLocation1"
          }
        }
      },
      "RDSSGIngressFromHQ2": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
          "GroupId": {
            "Ref": "RDSSecurityGroup"
          },
          "IpProtocol": "tcp",
          "FromPort": "1521",
          "ToPort": "1521",
          "CidrIp": {
            "Ref": "HQLocation2"
          }
        }
      },
      "RDSSGMySQLIngressFromHQ": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
          "GroupId": {
            "Ref": "RDSSecurityGroup"
          },
          "IpProtocol": "tcp",
          "FromPort": "3306",
          "ToPort": "3306",
          "CidrIp": {
            "Ref": "HQLocation1"
          }
        }
      },
      "RDSSGMySQLIngressFromHQ2": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
          "GroupId": {
            "Ref": "RDSSecurityGroup"
          },
          "IpProtocol": "tcp",
          "FromPort": "3306",
          "ToPort": "3306",
          "CidrIp": {
            "Ref": "HQLocation2"
          }
        }
      },
      "RDSSGOracleIngressFromVPN": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
          "GroupId": {
            "Ref": "RDSSecurityGroup"
          },
          "IpProtocol": "tcp",
          "FromPort": "1521",
          "ToPort": "1521",
          "CidrIp": "10.16.0.0/16"
        }
      },
      "RDSSGMySQLIngressFromVPN": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
          "GroupId": {
            "Ref": "RDSSecurityGroup"
          },
          "IpProtocol": "tcp",
          "FromPort": "3306",
          "ToPort": "3306",
          "CidrIp": "10.16.0.0/16"
        }
      },
      "RDSDBSubnetGroup": {
        "Type": "AWS::RDS::DBSubnetGroup",
        "Properties": {
          "DBSubnetGroupDescription": "Subnets available for the RDS DB Instance",
          "SubnetIds": [
            {
              "Ref": "Subnet1"
            },
            {
              "Ref": "Subnet2"
            },
            {
              "Ref": "Subnet3"
            }
          ]
        }
      },
      "EC2SGIngressICMPFromHQ": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
          "GroupId": {
            "Ref": "EC2SecurityGroup"
          },
          "IpProtocol": "icmp",
          "FromPort": "-1",
          "ToPort": "-1",
          "CidrIp": {
            "Ref": "HQLocation1"
          }
        }
      },
      "EC2SGIngressICMPFromHQ2": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
          "GroupId": {
            "Ref": "EC2SecurityGroup"
          },
          "IpProtocol": "icmp",
          "FromPort": "-1",
          "ToPort": "-1",
          "CidrIp": {
            "Ref": "HQLocation2"
          }
        }
      },
      "DHCPOptionsAttach": {
        "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
        "Properties": {
          "VpcId": {
            "Ref": "VPC"
          },
          "DhcpOptionsId": {
            "Ref": "DHCPOptions"
          }
        }
      },
      "DHCPOptions": {
        "Type": "AWS::EC2::DHCPOptions",
        "Properties": {
          "DomainName": "ec2.internal",
          "DomainNameServers": [
            "AmazonProvidedDNS"
          ],
          "Tags": [
            {
              "Key": "Name",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "Company"
                    },
                    "-",
                    {
                      "Ref": "Env"
                    }
                  ]
                ]
              }
            }
          ]
        }
      },
      "PublicRT": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
          "VpcId": {
            "Ref": "VPC"
          }
        }
      },
      "PrivateRT": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
          "VpcId": {
            "Ref": "VPC"
          }
        }
      },
      "ElasticIP": {
        "Type": "AWS::EC2::EIP",
        "Properties": {
          "Domain": "vpc"
        }
      },
      "NatGateway": {
        "Type": "AWS::EC2::NatGateway",
        "Properties": {
          "AllocationId": {
            "Fn::GetAtt": [
              "ElasticIP",
              "AllocationId"
            ]
          },
          "SubnetId": {
            "Ref": "Subnet1"
          }
        }
      },
      "RouteNatGateway": {
        "Type": "AWS::EC2::Route",
        "DependsOn": [
          "NatGateway"
        ],
        "Properties": {
          "DestinationCidrBlock": "0.0.0.0/0",
          "NatGatewayId": {
            "Ref": "NatGateway"
          },
          "RouteTableId": {
            "Ref": "PrivateRT"
          }
        }
      },
      "InternetGateway" : {
          "Type" : "AWS::EC2::InternetGateway",
          "Properties" : {
              "Tags" : [
                  {"Key" : "Network", "Value" : "Public" }
              ]
          }
      },
      "VpcIgAttachment": {
        "Type": "AWS::EC2::VPCGatewayAttachment",
        "Properties": {
          "InternetGatewayId": {
            "Ref": "InternetGateway"
          },
          "VpcId": {
            "Ref": "VPC"
          }
        }
      },
      "RouteIG": {
        "Type": "AWS::EC2::Route",
        "Properties": {
          "RouteTableId": {
            "Ref": "PublicRT"
          },
          "DestinationCidrBlock": "0.0.0.0/0",
          "GatewayId": {
            "Ref": "InternetGateway"
          }
        }
      },
      "Subnet1RouteTableAssociation": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "SubnetId": {
            "Ref": "Subnet1"
          },
          "RouteTableId": {
            "Ref": "PrivateRT"
          }
        }
      },
      "Subnet2RouteTableAssociation": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "SubnetId": {
            "Ref": "Subnet2"
          },
          "RouteTableId": {
            "Ref": "PrivateRT"
          }
        }
      },
      "Subnet3RouteTableAssociation": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "SubnetId": {
            "Ref": "Subnet3"
          },
          "RouteTableId": {
            "Ref": "PrivateRT"
          }
        }
      },
      "Subnet4RouteTableAssociation": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "SubnetId": {
            "Ref": "Subnet4"
          },
          "RouteTableId": {
            "Ref": "PublicRT"
          }
        }
      },
      "Subnet5RouteTableAssociation": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "SubnetId": {
            "Ref": "Subnet5"
          },
          "RouteTableId": {
            "Ref": "PublicRT"
          }
        }
      },
      "Subnet6RouteTableAssociation": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "SubnetId": {
            "Ref": "Subnet6"
          },
          "RouteTableId": {
            "Ref": "PublicRT"
          }
        }
      },
      "VPCDefaultSecurityGroupIngressHQ": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
          "GroupId": {
            "Fn::GetAtt": [
              "VPC",
              "DefaultSecurityGroup"
            ]
          },
          "IpProtocol": "-1",
          "FromPort": "0",
          "ToPort": "65535",
          "CidrIp": {
            "Ref": "HQLocation1"
          }
        }
      },
      "VPCDefaultSecurityGroupIngressHQ2": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
          "GroupId": {
            "Fn::GetAtt": [
              "VPC",
              "DefaultSecurityGroup"
            ]
          },
          "IpProtocol": "-1",
          "FromPort": "0",
          "ToPort": "65535",
          "CidrIp": {
            "Ref": "HQLocation2"
          }
        }
      },
      "VPCDefaultSecurityGroupIngressVPC": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
          "GroupId": {
            "Fn::GetAtt": [
              "VPC",
              "DefaultSecurityGroup"
            ]
          },
          "IpProtocol": "-1",
          "FromPort": "0",
          "ToPort": "65535",
          "CidrIp": {
            "Ref": "VPCSubnet"
          }
        }
      },
      "VPCDefaultSecurityGroupIngressVPN": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
          "GroupId": {
            "Fn::GetAtt": [
              "VPC",
              "DefaultSecurityGroup"
            ]
          },
          "IpProtocol": "-1",
          "FromPort": "0",
          "ToPort": "65535",
          "CidrIp": "10.16.0.0/16"
        }
      }
    }
  }
